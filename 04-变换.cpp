总结：
    1.想要展现动态的渲染，通过矩阵变换实现

概述：
1.向量
{
    //向量点乘
    理解：角度 v¯⋅k¯=||v¯||⋅||k¯||⋅cosθ
    计算：逐个分量相乘再相加
    
    //向量叉乘
    理解：生成一个正交于两个输入向量的向量->右手法则
    计算：各个分量按照公式计算
}

2.矩阵
{
    //向量即为N×1的矩阵
}

3.矩阵变换
{
    //缩放
    |¯ S1   0   0   0 ¯|  |x| 
    |  0    S2  0   0  |  |y|
    |  0    0   S3  0  |  |z|
    |_ 0    0   0   1 _|  |1|
    
    //位移
    |¯ 1   0   0   Tx ¯|  |x| 
    |  0   1   0   Ty  |  |y|
    |  0   0   1   Tz  |  |z|
    |_ 0   0   0   1  _|  |1|
    
    //沿x旋转
    |¯ 1    0       0     0  ¯|  |x| 
    |  0   cosθ   -sinθ   0   |  |y|
    |  0   sinθ    cosθ   0   |  |z|
    |_ 0    0       0     1  _|  |1|
    //沿Y旋转
    |¯ cosθ   0    sinθ   0  ¯|  |x| 
    |   0     1     0     0   |  |y|
    | -sinθ   0    cosθ   0   |  |z|
    |_  0     0     0     1  _|  |1|
    //沿Z旋转
    |¯ cosθ   -sinθ   0   0  ¯|  |x| 
    |  sinθ   cosθ    0   0   |  |y|
    |   0      0      1   0   |  |z|
    |_  0      0      0   1  _|  |1|
    //沿任意轴旋转
    ...

    //复合旋转带来的问题：
    万向节死锁
    解决方法：四元数

    //组合变换顺序：
    缩放 -> 旋转 -> 位移
}

4.数学库
{
    //GLM 是一个只有头文件的库，不需要链接和编译
}